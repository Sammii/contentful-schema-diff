
import {exec} from 'child_process'
import { create } from 'domain'
import * as fs from 'fs-extra'
import * as path from 'path'
import { Writable } from 'stream'

import { writeCreate } from './create'
import { writeDelete } from './delete'
import { IContentType } from './model'
import { writeModify } from './modify'
import { FilePerContentTypeRunner } from './runners/file_per_content_type'
import { WriteSingleFileRunner } from './runners/write_single_file'
import { loadSources } from './source'
import { asyncWriter, indexById, wait } from './utils'

export interface IArgs {
  from: string,
  to: string,
  oneFile: boolean,
  outDir: string,
  managementToken: string
}

export default async function Run(args: IArgs) {

  const [from, to] = await loadSources(args)

  const fromTypes = indexById(from)
  const toTypes = indexById(to)

  const HEADER = `import Migration from 'contentful-migration-cli'

// Generated by contentful-schema-diff
// from ${args.from}
// to   ${args.to}
export = function (migration: Migration) {
`

  const FOOTER = `
}
`

  const runner = args.oneFile ?
    new WriteSingleFileRunner(args.outDir, HEADER, FOOTER) :
    new FilePerContentTypeRunner(args.outDir, HEADER, FOOTER)

  await runner.init()

  const promises = runner.run(Object.keys(toTypes), (id, chunkWriter) => {
    if (fromTypes[id]) {
      return writeModify(fromTypes[id], toTypes[id], chunkWriter)
    } else {
      return writeCreate(toTypes[id], chunkWriter)
    }
  })
  promises.push(...runner.run(Object.keys(fromTypes), (id, chunkWriter) => {
    if (toTypes[id]) {
      // handled above in 'writeModify'
      return
    }

    return writeDelete(id, chunkWriter)
  }))

  await Promise.all(promises)

  return await runner.close()
}
