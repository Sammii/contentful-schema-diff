
import * as fs from 'fs-extra'
import * as path from 'path'
import { IContentType } from './model'

import { asyncWriter, indexById } from './utils';
import { writeCreate } from './create';
import { writeModify } from './modify';
import { writeDelete } from './delete';

export interface IArgs {
  from: string,
  to: string,
  outDir: string
}

export default async function Run(args: IArgs) {

  const [from, to] = (await Promise.all([
    fs.readFile(args.from),
    fs.readFile(args.to)
  ])).map(b => JSON.parse(b.toString()))

  const fromTypes = indexById(from.contentTypes)
  const toTypes = indexById(to.contentTypes)

  const fileName = `${new Date().toISOString().replace(/[^\d]/g, '').substring(0, 14)}_generated_from_diff.ts`
  const outputStream = fs.createWriteStream(path.join(args.outDir, fileName))
  const write = asyncWriter(outputStream)

  await write(`import Migration from 'contentful-migration-cli'

// Generated by contentful-schema-diff
// from ${args.from}
// to   ${args.to}
export = function (migration: Migration) {
`)

  const promises = Object.keys(toTypes).map(async (id) => {
    let chunks: string[]
    if (fromTypes[id]) {
      await writeModify(fromTypes[id], toTypes[id], async (chunk: string) => chunks.push(chunk))
    } else {
      await writeCreate(toTypes[id], async (chunk: string) => chunks.push(chunk))
    }

    if (chunks.length > 0) {
      await write(chunks.join(''))
    }
  })
  promises.push(...Object.keys(fromTypes).map(async (id) => {
    let chunks: string[]
    if (toTypes[id]) {
      // handled above in 'writeModify'
      return
    }
    
    writeDelete(id, async (chunk: string) => chunks.push(chunk))
    
    if (chunks.length > 0) {
      await write(chunks.join(''))
    }
  }))

  await Promise.all(promises)

  await write(`
}
`)

  outputStream.close();
}
