
import * as fs from 'fs-extra'
import * as path from 'path'
import { IContentType } from './model'

import { asyncWriter, indexById } from './utils';
const { diff } = require('json-diff')
const { colorize } = require('json-diff/lib/colorize')

export interface IArgs {
  from: string,
  to: string,
  outDir: string
}

export default async function Run(args: IArgs) {

  const [from, to] = (await Promise.all([
    fs.readFile(args.from),
    fs.readFile(args.to)
  ])).map(b => JSON.parse(b.toString()))

  const fromTypes = indexById(from.contentTypes)
  const toTypes = indexById(to.contentTypes)

  const fileName = `${new Date().toISOString().replace(/[^\d]/g, '').substring(0, 14)}_generated_from_diff.ts`
  const outputStream = fs.createWriteStream(path.join(args.outDir, fileName))
  const write = asyncWriter(outputStream)

  await write(`import Migration from 'contentful-migration-cli'

// Generated by contentful-schema-diff
// from ${args.from}
// to   ${args.to}
export = function (migration: Migration) {
`)

  const promises = Object.keys(toTypes).map(async (id) => {
    let chunk: string
    if (fromTypes[id]) {
      chunk = await writeModify(fromTypes[id], toTypes[id])
    } else {
      chunk = await writeCreate(toTypes[id])
    }

    if (chunk && chunk.length > 0) {
      await write(chunk)
    }
  })
  promises.push(...Object.keys(fromTypes).map(async (id) => {
    if (toTypes[id]) {
      // handled above in 'writeModify'
      return
    }
    const chunk = await writeDelete(id)
    await write(chunk)
  }))

  await Promise.all(promises)

  await write(`
}
`)

  outputStream.close();
}

async function writeDelete(id: string): Promise<string> {
  return `
  migration.deleteContentType('${id}')
`
}

async function writeModify(from: IContentType, to: IContentType): Promise<string> {
  const difference = diff(from.fields, to.fields)
  if (!difference || difference.length == 0) {
    return
  }

  const v = from.sys.id.camelCase()
  const typeDef = Object.assign({}, to)
  delete(typeDef.fields)
  delete(typeDef.sys)

  let str = `
  var ${v} = migration.editContentType('${from.sys.id}', ${typeDef.dump()})
`
    str += `
  /* TODO: automatically generate edits from this diff
${colorize(difference, { color: false } )} */
  `

  return str
}

async function writeCreate(newType: IContentType): Promise<string> {
  const v = newType.sys.id.camelCase()
  const typeDef = Object.assign({}, newType)
  delete(typeDef.fields)
  delete(typeDef.sys)

  let str = `
  var ${v} = migration.createContentType('${newType.sys.id}', ${typeDef.dump()})
`
  newType.fields.forEach(field => {
    const fieldDef = Object.assign({}, field)
    delete(fieldDef.id)

    str += `
  ${v}.createField('${field.id}', ${fieldDef.dump()})
`
  })
  
  return str;
}
