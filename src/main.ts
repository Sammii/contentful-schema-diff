
import * as fs from 'fs-extra'
import * as path from 'path'
import { IContentType } from './model'

import { asyncWriter, indexById } from './utils';
import { writeCreate } from './create';
import { writeModify } from './modify';
import { writeDelete } from './delete';
import { Writable } from 'stream';

export interface IArgs {
  from: string,
  to: string,
  oneFile: boolean,
  outDir: string
}

export default async function Run(args: IArgs) {

  const [from, to] = (await Promise.all([
    fs.readFile(args.from),
    fs.readFile(args.to)
  ])).map(b => JSON.parse(b.toString()))

  const fromTypes = indexById(from.contentTypes)
  const toTypes = indexById(to.contentTypes)

  const HEADER = `import Migration from 'contentful-migration-cli'

// Generated by contentful-schema-diff
// from ${args.from}
// to   ${args.to}
export = function (migration: Migration) {
`

  const FOOTER =`
}
`

  const runner = new WriteSingleFileRunner(args.outDir, HEADER, FOOTER)

  await runner.init()

  const promises = runner.run(Object.keys(toTypes), async (id, chunkWriter) => {
    if (fromTypes[id]) {
      await writeModify(fromTypes[id], toTypes[id], chunkWriter)
    } else {
      await writeCreate(toTypes[id], chunkWriter)
    }
  })
  promises.push(...runner.run(Object.keys(fromTypes), async (id, chunkWriter) => {
    if (toTypes[id]) {
      // handled above in 'writeModify'
      return
    }
    
    writeDelete(id, chunkWriter)
  }))

  await Promise.all(promises)

  await runner.close();
}

type AsyncWrite = (chunk: string) => Promise<any> 

class WriteSingleFileRunner {
  fileWriter: AsyncWrite
  outputStream: fs.WriteStream
  header: string
  footer: string

  constructor(outDir: string, header: string, footer: string) {
    const fileName = `${new Date().toISOString().replace(/[^\d]/g, '').substring(0, 14)}_generated_from_diff.ts`
    this.outputStream = fs.createWriteStream(path.join(outDir, fileName))
    this.fileWriter = asyncWriter(this.outputStream)
    this.header = header
    this.footer = footer
  }  

  async init() {
    await this.fileWriter(this.header)
  }

  run(keys: string[], run: (id: string, write: AsyncWrite) => Promise<void>): Promise<void>[] {
    return keys.map(async (id: string) => {
      let chunks: string[] = []

      await run(id, (chunk: string) => Promise.resolve(chunks.push(chunk)))

      if (chunks.length > 0) {
        const header =`
  /************  ${id}  ******************/
`
        await this.fileWriter(header + chunks.join(''))
      }
    })
  }

  async close() {
    await this.fileWriter(this.footer)

    this.outputStream.close();
  }
}